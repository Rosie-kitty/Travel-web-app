version: '3.8'

services:
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: travel-api
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: travel
    networks:
      - travel-network

  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    container_name: travel-ai
    ports:
      - '8001:8000'
    depends_on:
      - db
    environment:
      # Добавьте здесь переменные окружения для AI-сервиса
      HF_API_KEY: ${HF_API_KEY}
      VK_CLIENT_ID: ${VK_CLIENT_ID}
      VK_CLIENT_SECRET: ${VK_CLIENT_SECRET}
    networks:
      - travel-network

  db:
    image: postgres:16
    container_name: travel-db
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: travel
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - travel-network

  redis:
    image: redis:7-alpine
    container_name: travel-redis
    ports:
      - '6379:6379'
    volumes:
      - redisdata:/data
    networks:
      - travel-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: travel-rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - travel-network

volumes:
  pgdata:
  redisdata:

networks:
  travel-network:
    driver: bridge
