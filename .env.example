# ─────────────────────────────────────────────────────────────────────────────
#                          Основные настройки для API и AI
# ─────────────────────────────────────────────────────────────────────────────

# Режим работы приложения (development / production)
NODE_ENV=development

# Порты сервисов (вы можете изменить при необходимости):
#   API будет слушать на этом порту
PORT_API=3000
#   AI-сервис будет слушать на этом порту
PORT_AI=8000

# ─────────────────────────────────────────────────────────────────────────────
#                             Настройки базы данных
# ─────────────────────────────────────────────────────────────────────────────

# Хост PostgreSQL (имя сервиса из docker-compose или хост в продакшене)
DB_HOST=db
# Порт PostgreSQL
DB_PORT=5432
# Имя пользователя PostgreSQL
DB_USER=postgres
# Пароль пользователя PostgreSQL
DB_PASSWORD=your_postgres_password
# Имя базы данных
DB_NAME=travel_db

# ─────────────────────────────────────────────────────────────────────────────
#                               Настройки Redis
# ─────────────────────────────────────────────────────────────────────────────

# Хост Redis (имя сервиса из docker-compose)
REDIS_HOST=redis
# Порт Redis
REDIS_PORT=6379
# Пароль для Redis (оставьте пустым, если Redis не настроен на password)
REDIS_PASSWORD=

# ─────────────────────────────────────────────────────────────────────────────
#                            Настройки RabbitMQ
# ─────────────────────────────────────────────────────────────────────────────

# Хост RabbitMQ (имя сервиса из docker-compose)
RABBITMQ_HOST=rabbitmq
# Порт RabbitMQ (обычно 5672)
RABBITMQ_PORT=5672
# Логин для подключения к RabbitMQ
RABBITMQ_USER=guest
# Пароль для подключения к RabbitMQ
RABBITMQ_PASSWORD=guest
# Имя (название) очереди для уведомлений / задач
RABBITMQ_QUEUE=travel_queue

# ─────────────────────────────────────────────────────────────────────────────
#                              Переменные для API (NestJS)
# ─────────────────────────────────────────────────────────────────────────────

# Секретная фраза для подписи JWT
JWT_SECRET=your_jwt_secret
# Время жизни JWT (например, "1d", "12h", "3600s")
JWT_EXPIRES_IN=1d

# Ключ API для карт (HERE Maps)
HERE_API_KEY=your_here_api_key

# Переменные для OAuth (VK, Google) (для регистрации/логина через соцсети)
VK_CLIENT_ID=your_vk_client_id
VK_CLIENT_SECRET=your_vk_client_secret

# EMAIL-сервис (SMTP) для отправки писем (восстановление пароля, 2FA):
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=your_smtp_user
SMTP_PASSWORD=your_smtp_password
SMTP_FROM=“no-reply@example.com”

# ─────────────────────────────────────────────────────────────────────────────
#                            Переменные для AI (FastAPI)
# ─────────────────────────────────────────────────────────────────────────────

# Ключ для доступа к Hugging Face API (анализ токсичности, ML-инференс и т. д.)
HF_API_KEY=your_hf_api_key

# Если AI-сервис хранит модели локально или загружает их из какого-то пути, 
# укажите путь внутри контейнера (например, /app/models/…)
AI_MODEL_PATH=/app/models/model.bin

# Уровень логов FastAPI (debug / info / warning / error / critical)
AI_LOG_LEVEL=info

# Время жизни кэшированных результатов ML (в секундах)
AI_CACHE_TTL=3600

# Другие переменные для AI (если понадобится):
#   Внешние API, дополнительные ключи и т. д.
#   EXAMPLE_API_KEY=your_example_api_key

# ─────────────────────────────────────────────────────────────────────────────
#                           Настройки для фронтенда (при наличии)
# ─────────────────────────────────────────────────────────────────────────────

# Если в будущем появится фронтенд (Next.js/Vue/React), сюда можно добавить:
#   API_BASE_URL=http://localhost:3000/api
#   SOCKET_URL=ws://localhost:3000
#   MAPS_API_KEY=your_maps_api_key

# ─────────────────────────────────────────────────────────────────────────────
#                       Как использовать этот файл в разработке
# ─────────────────────────────────────────────────────────────────────────────

# 1. Скопируйте .env.example → api/.env и заполните реальными значениями для API.
#    Для этого в корне выполните:
#      cp .env.example .\services\api\.env
#
# 2. (Опционально) Если вы хотите, чтобы AI-сервис сам загружал конфиг,
#    скопируйте .env.example → ai/.env и при необходимости удалите неиспользуемые.
#      cp .env.example .\services\ai\.env
#
# 3. Удостоверьтесь, что gitignore не включает .env, чтобы реальный .env не попал в репозиторий:
#      # .gitignore
#      **/api/.env
#      **/ai/.env
#      .env.local
#
# 4. После этого при запуске docker-compose все переменные подхватятся из этих .env-файлов.
#   Запуск (из корня):
#      docker-compose up --build -d
#
# ─────────────────────────────────────────────────────────────────────────────
